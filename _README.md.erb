# Chef Cookbook Skeleton

<%= fragments['badges'] %>
## Description

<%= description %>

<%= fragments['makenew'] %>

<%= fragments['usage'] %>
<% unless platforms.empty? %>
## Platform Support

<% platforms.each do |platform| %>
* <%= platform %>
<% end -%>
<% end -%>
<% unless dependencies.empty? &&
   recommendations.empty? &&
   suggestions.empty? &&
   conflicting.empty? %>

## Cookbook Dependencies

<% dependencies.each do |cookbook| %>
* <%= cookbook %>
<% end -%>
<% recommendations.each do |cookbook| %>
* <%= cookbook %> (Recommended but not required)
<% end -%>
<% suggestions.each do |cookbook| %>
* <%= cookbook %> (Suggested but not required)
<% end -%>
<% conflicting.each do |cookbook| %>
* Conflicts with <%= cookbook %>
<% end -%>
<% end -%>
<% unless attributes.empty? %>

## Attributes

Attribute | Description | Default | Choices
----------|-------------|---------|--------
<% attributes.each do |name, description, default, choice| %>
`<%= name %>` | `<%= description %>` | <%= default.inspect %> | <% unless choice.empty? %><%= "`#{choice.map(&:inspect).join('`, `')}`" %><% end %>
<% end -%>
<% end -%>
<% unless recipes.empty? %>

## Recipes

<% recipes.each do |recipe| %>
* <% if recipe.top_level_descriptions.empty? %><%= recipe.name %><% else %>[<%= recipe.name %>](#<%= recipe.name.gsub(':','') %>)<% end %><% if recipe.short_description != '' %> - <%= recipe.short_description %><% end %>
<% end %>
<% recipes.each do |recipe| -%>
<% unless recipe.top_level_descriptions.empty? -%>

### <%= recipe.name %>

<% if recipe.top_level_description('main') != '' -%>
<%= recipe.top_level_description('main') %>
<% end -%>
<% recipe.top_level_descriptions.keys.select{|k| k != 'main'}.each do |key| -%>
#### <%= key -%>

<%= recipe.top_level_description(key) %>

<% end -%>
<% end -%>
<% end -%>
<% end -%>
<% unless definitions.empty? -%>

## Definitions

<% definitions.each do |definition| -%>
* [<%= definition.name %>](#<%= definition.name %>)<% if definition.short_description %> - <%= definition.short_description %><% end %>
<% end -%>
<% definitions.each do |definition| -%>

### <%= definition.name %>
<% if definition.top_level_description('main') != '' -%>

<%= definition.top_level_description('main') -%>

<% end -%>
<% unless definition.params.empty? -%>

#### Parameters

<% definition.params.each do |param, data| -%>
- <%= param %>: <%= data['descr'] %>.<% if data['default']%> Defaults to: <%=data['default']%><%end%>
<% end -%>
<% end -%>
<% definition.top_level_descriptions.keys.select{|k| k != 'main'}.each do |key| -%>

### <%= key -%>

<%= definition.top_level_description(key) -%>

<% end -%>
<% end -%>
<% end -%>
<% unless resources.empty? -%>

## Resources

<% resources.each do |resource| %>
* [<%= resource.name %>](#<%= resource.name %>)<% if resource.short_description %> - <%= resource.short_description %><% end %>
<% end %>
<% resources.each do |resource| -%>

### <%= resource.name %>
<% if resource.top_level_description('main') != '' -%>

<%= resource.top_level_description('main') -%>
<% end -%>
<% unless resource.actions.empty? -%>

#### Actions

<% resource.actions.each do |action| -%>
- <%= action %>: <%= resource.action_description(action) %><% if resource.default_action == action %> Default action.<% end %>
<% end -%>
<% end -%>
<% unless resource.attributes.empty? -%>

#### Attribute Parameters

<% resource.attributes.each do |attribute| -%>
- <%= attribute %>: <%= resource.attribute_description(attribute) %><% if resource.attribute_has_default_value?(attribute) %> Defaults to <code><%= resource.attribute_default_value(attribute).inspect %></code>.<% end %>
<% end -%>
<% end -%>
<% resource.top_level_descriptions.keys.select{|k| k != 'main'}.each do |key| -%>

#### <%= key -%>

<%= resource.top_level_description(key) -%>
<% end -%>
<% end -%>
<% end -%>

## Development and Testing

<%= fragments['requirements'] %>
<%= fragments['source'] %>
<%= fragments['rake'] %>
<%= fragments['thor'] %>
<%= fragments['guard'] %>
<%= fragments['contributing'] %>
<%= fragments['license'] %>
## Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
